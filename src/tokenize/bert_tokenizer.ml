(* TODO: handle accents. *)
open! Base

module Interval = struct
  (* [start] is included, [stop] is not included. *)
  type t =
    { start : int
    ; stop : int
    }
  [@@deriving sexp]

  let create ~start ~stop = { start; stop }
  let sub t str = String.sub str ~pos:t.start ~len:(t.stop - t.start)
end

type t =
  { vocab : Bert_vocab.t
  ; lower_case : bool
  }

let create vocab ~lower_case = { vocab; lower_case }

let split text ~split_on =
  let decoder = Uutf.decoder (`String text) in
  let intervals = Queue.create () in
  let last_start = ref 0 in
  let in_content = ref true in
  let maybe_enqueue ~stop =
    let start = !last_start in
    last_start := stop;
    if stop - start > 0
    then (
      let interval = Interval.create ~start ~stop in
      let kind = if !in_content then `content else `separator in
      Queue.enqueue intervals (kind, interval));
    in_content := not !in_content
  in
  let rec loop () =
    let char_start = Uutf.decoder_byte_count decoder in
    match Uutf.decode decoder with
    | `Uchar uchar ->
      let split_on = split_on uchar in
      if (split_on && !in_content) || ((not split_on) && not !in_content)
      then maybe_enqueue ~stop:char_start;
      loop ()
    | `End -> ()
    | `Malformed _ -> ()
    | `Await -> assert false
  in
  loop ();
  maybe_enqueue ~stop:(String.length text);
  Queue.to_list intervals

let is_whitespace uchar =
  match Uchar.to_scalar uchar with
  | 0x0020
  | 0x00A0
  | 0x1680
  | 0x2000
  | 0x2001
  | 0x2002
  | 0x2003
  | 0x2004
  | 0x2005
  | 0x2006
  | 0x2007
  | 0x2008
  | 0x2009
  | 0x200A
  | 0x202F
  | 0x205F
  | 0x3000
  | 0x0009
  | 0x000D
  | 0x00A -> true
  | _ -> false

let is_punctuation uchar =
  let scalar = Uchar.to_scalar uchar in
  if (scalar >= 33 && scalar <= 47)
     || (scalar >= 58 && scalar <= 64)
     || (scalar >= 91 && scalar <= 96)
     || (scalar >= 123 && scalar <= 126)
  then true
  else (
    match scalar with
    | 0xa1
    | 0xa7
    | 0xab
    | 0xb6
    | 0xb7
    | 0xbb
    | 0xbf
    | 0x37e
    | 0x387
    | 0x55a
    | 0x55b
    | 0x55c
    | 0x55d
    | 0x55e
    | 0x55f
    | 0x589
    | 0x58a
    | 0x5be
    | 0x5c0
    | 0x5c3
    | 0x5c6
    | 0x5f3
    | 0x5f4
    | 0x609
    | 0x60a
    | 0x60c
    | 0x60d
    | 0x61b
    | 0x61e
    | 0x61f
    | 0x66a
    | 0x66b
    | 0x66c
    | 0x66d
    | 0x6d4
    | 0x700
    | 0x701
    | 0x702
    | 0x703
    | 0x704
    | 0x705
    | 0x706
    | 0x707
    | 0x708
    | 0x709
    | 0x70a
    | 0x70b
    | 0x70c
    | 0x70d
    | 0x7f7
    | 0x7f8
    | 0x7f9
    | 0x830
    | 0x831
    | 0x832
    | 0x833
    | 0x834
    | 0x835
    | 0x836
    | 0x837
    | 0x838
    | 0x839
    | 0x83a
    | 0x83b
    | 0x83c
    | 0x83d
    | 0x83e
    | 0x85e
    | 0x964
    | 0x965
    | 0x970
    | 0x9fd
    | 0xa76
    | 0xaf0
    | 0xc84
    | 0xdf4
    | 0xe4f
    | 0xe5a
    | 0xe5b
    | 0xf04
    | 0xf05
    | 0xf06
    | 0xf07
    | 0xf08
    | 0xf09
    | 0xf0a
    | 0xf0b
    | 0xf0c
    | 0xf0d
    | 0xf0e
    | 0xf0f
    | 0xf10
    | 0xf11
    | 0xf12
    | 0xf14
    | 0xf3a
    | 0xf3b
    | 0xf3c
    | 0xf3d
    | 0xf85
    | 0xfd0
    | 0xfd1
    | 0xfd2
    | 0xfd3
    | 0xfd4
    | 0xfd9
    | 0xfda
    | 0x104a
    | 0x104b
    | 0x104c
    | 0x104d
    | 0x104e
    | 0x104f
    | 0x10fb
    | 0x1360
    | 0x1361
    | 0x1362
    | 0x1363
    | 0x1364
    | 0x1365
    | 0x1366
    | 0x1367
    | 0x1368
    | 0x1400
    | 0x166d
    | 0x166e
    | 0x169b
    | 0x169c
    | 0x16eb
    | 0x16ec
    | 0x16ed
    | 0x1735
    | 0x1736
    | 0x17d4
    | 0x17d5
    | 0x17d6
    | 0x17d8
    | 0x17d9
    | 0x17da
    | 0x1800
    | 0x1801
    | 0x1802
    | 0x1803
    | 0x1804
    | 0x1805
    | 0x1806
    | 0x1807
    | 0x1808
    | 0x1809
    | 0x180a
    | 0x1944
    | 0x1945
    | 0x1a1e
    | 0x1a1f
    | 0x1aa0
    | 0x1aa1
    | 0x1aa2
    | 0x1aa3
    | 0x1aa4
    | 0x1aa5
    | 0x1aa6
    | 0x1aa8
    | 0x1aa9
    | 0x1aaa
    | 0x1aab
    | 0x1aac
    | 0x1aad
    | 0x1b5a
    | 0x1b5b
    | 0x1b5c
    | 0x1b5d
    | 0x1b5e
    | 0x1b5f
    | 0x1b60
    | 0x1bfc
    | 0x1bfd
    | 0x1bfe
    | 0x1bff
    | 0x1c3b
    | 0x1c3c
    | 0x1c3d
    | 0x1c3e
    | 0x1c3f
    | 0x1c7e
    | 0x1c7f
    | 0x1cc0
    | 0x1cc1
    | 0x1cc2
    | 0x1cc3
    | 0x1cc4
    | 0x1cc5
    | 0x1cc6
    | 0x1cc7
    | 0x1cd3
    | 0x2010
    | 0x2011
    | 0x2012
    | 0x2013
    | 0x2014
    | 0x2015
    | 0x2016
    | 0x2017
    | 0x2018
    | 0x2019
    | 0x201a
    | 0x201b
    | 0x201c
    | 0x201d
    | 0x201e
    | 0x201f
    | 0x2020
    | 0x2021
    | 0x2022
    | 0x2023
    | 0x2024
    | 0x2025
    | 0x2026
    | 0x2027
    | 0x2030
    | 0x2031
    | 0x2032
    | 0x2033
    | 0x2034
    | 0x2035
    | 0x2036
    | 0x2037
    | 0x2038
    | 0x2039
    | 0x203a
    | 0x203b
    | 0x203c
    | 0x203d
    | 0x203e
    | 0x203f
    | 0x2040
    | 0x2041
    | 0x2042
    | 0x2043
    | 0x2045
    | 0x2046
    | 0x2047
    | 0x2048
    | 0x2049
    | 0x204a
    | 0x204b
    | 0x204c
    | 0x204d
    | 0x204e
    | 0x204f
    | 0x2050
    | 0x2051
    | 0x2053
    | 0x2054
    | 0x2055
    | 0x2056
    | 0x2057
    | 0x2058
    | 0x2059
    | 0x205a
    | 0x205b
    | 0x205c
    | 0x205d
    | 0x205e
    | 0x207d
    | 0x207e
    | 0x208d
    | 0x208e
    | 0x2308
    | 0x2309
    | 0x230a
    | 0x230b
    | 0x2329
    | 0x232a
    | 0x2768
    | 0x2769
    | 0x276a
    | 0x276b
    | 0x276c
    | 0x276d
    | 0x276e
    | 0x276f
    | 0x2770
    | 0x2771
    | 0x2772
    | 0x2773
    | 0x2774
    | 0x2775
    | 0x27c5
    | 0x27c6
    | 0x27e6
    | 0x27e7
    | 0x27e8
    | 0x27e9
    | 0x27ea
    | 0x27eb
    | 0x27ec
    | 0x27ed
    | 0x27ee
    | 0x27ef
    | 0x2983
    | 0x2984
    | 0x2985
    | 0x2986
    | 0x2987
    | 0x2988
    | 0x2989
    | 0x298a
    | 0x298b
    | 0x298c
    | 0x298d
    | 0x298e
    | 0x298f
    | 0x2990
    | 0x2991
    | 0x2992
    | 0x2993
    | 0x2994
    | 0x2995
    | 0x2996
    | 0x2997
    | 0x2998
    | 0x29d8
    | 0x29d9
    | 0x29da
    | 0x29db
    | 0x29fc
    | 0x29fd
    | 0x2cf9
    | 0x2cfa
    | 0x2cfb
    | 0x2cfc
    | 0x2cfe
    | 0x2cff
    | 0x2d70
    | 0x2e00
    | 0x2e01
    | 0x2e02
    | 0x2e03
    | 0x2e04
    | 0x2e05
    | 0x2e06
    | 0x2e07
    | 0x2e08
    | 0x2e09
    | 0x2e0a
    | 0x2e0b
    | 0x2e0c
    | 0x2e0d
    | 0x2e0e
    | 0x2e0f
    | 0x2e10
    | 0x2e11
    | 0x2e12
    | 0x2e13
    | 0x2e14
    | 0x2e15
    | 0x2e16
    | 0x2e17
    | 0x2e18
    | 0x2e19
    | 0x2e1a
    | 0x2e1b
    | 0x2e1c
    | 0x2e1d
    | 0x2e1e
    | 0x2e1f
    | 0x2e20
    | 0x2e21
    | 0x2e22
    | 0x2e23
    | 0x2e24
    | 0x2e25
    | 0x2e26
    | 0x2e27
    | 0x2e28
    | 0x2e29
    | 0x2e2a
    | 0x2e2b
    | 0x2e2c
    | 0x2e2d
    | 0x2e2e
    | 0x2e30
    | 0x2e31
    | 0x2e32
    | 0x2e33
    | 0x2e34
    | 0x2e35
    | 0x2e36
    | 0x2e37
    | 0x2e38
    | 0x2e39
    | 0x2e3a
    | 0x2e3b
    | 0x2e3c
    | 0x2e3d
    | 0x2e3e
    | 0x2e3f
    | 0x2e40
    | 0x2e41
    | 0x2e42
    | 0x2e43
    | 0x2e44
    | 0x2e45
    | 0x2e46
    | 0x2e47
    | 0x2e48
    | 0x2e49
    | 0x2e4a
    | 0x2e4b
    | 0x2e4c
    | 0x2e4d
    | 0x2e4e
    | 0x3001
    | 0x3002
    | 0x3003
    | 0x3008
    | 0x3009
    | 0x300a
    | 0x300b
    | 0x300c
    | 0x300d
    | 0x300e
    | 0x300f
    | 0x3010
    | 0x3011
    | 0x3014
    | 0x3015
    | 0x3016
    | 0x3017
    | 0x3018
    | 0x3019
    | 0x301a
    | 0x301b
    | 0x301c
    | 0x301d
    | 0x301e
    | 0x301f
    | 0x3030
    | 0x303d
    | 0x30a0
    | 0x30fb
    | 0xa4fe
    | 0xa4ff
    | 0xa60d
    | 0xa60e
    | 0xa60f
    | 0xa673
    | 0xa67e
    | 0xa6f2
    | 0xa6f3
    | 0xa6f4
    | 0xa6f5
    | 0xa6f6
    | 0xa6f7
    | 0xa874
    | 0xa875
    | 0xa876
    | 0xa877
    | 0xa8ce
    | 0xa8cf
    | 0xa8f8
    | 0xa8f9
    | 0xa8fa
    | 0xa8fc
    | 0xa92e
    | 0xa92f
    | 0xa95f
    | 0xa9c1
    | 0xa9c2
    | 0xa9c3
    | 0xa9c4
    | 0xa9c5
    | 0xa9c6
    | 0xa9c7
    | 0xa9c8
    | 0xa9c9
    | 0xa9ca
    | 0xa9cb
    | 0xa9cc
    | 0xa9cd
    | 0xa9de
    | 0xa9df
    | 0xaa5c
    | 0xaa5d
    | 0xaa5e
    | 0xaa5f
    | 0xaade
    | 0xaadf
    | 0xaaf0
    | 0xaaf1
    | 0xabeb
    | 0xfd3e
    | 0xfd3f
    | 0xfe10
    | 0xfe11
    | 0xfe12
    | 0xfe13
    | 0xfe14
    | 0xfe15
    | 0xfe16
    | 0xfe17
    | 0xfe18
    | 0xfe19
    | 0xfe30
    | 0xfe31
    | 0xfe32
    | 0xfe33
    | 0xfe34
    | 0xfe35
    | 0xfe36
    | 0xfe37
    | 0xfe38
    | 0xfe39
    | 0xfe3a
    | 0xfe3b
    | 0xfe3c
    | 0xfe3d
    | 0xfe3e
    | 0xfe3f
    | 0xfe40
    | 0xfe41
    | 0xfe42
    | 0xfe43
    | 0xfe44
    | 0xfe45
    | 0xfe46
    | 0xfe47
    | 0xfe48
    | 0xfe49
    | 0xfe4a
    | 0xfe4b
    | 0xfe4c
    | 0xfe4d
    | 0xfe4e
    | 0xfe4f
    | 0xfe50
    | 0xfe51
    | 0xfe52
    | 0xfe54
    | 0xfe55
    | 0xfe56
    | 0xfe57
    | 0xfe58
    | 0xfe59
    | 0xfe5a
    | 0xfe5b
    | 0xfe5c
    | 0xfe5d
    | 0xfe5e
    | 0xfe5f
    | 0xfe60
    | 0xfe61
    | 0xfe63
    | 0xfe68
    | 0xfe6a
    | 0xfe6b
    | 0xff01
    | 0xff02
    | 0xff03
    | 0xff05
    | 0xff06
    | 0xff07
    | 0xff08
    | 0xff09
    | 0xff0a
    | 0xff0c
    | 0xff0d
    | 0xff0e
    | 0xff0f
    | 0xff1a
    | 0xff1b
    | 0xff1f
    | 0xff20
    | 0xff3b
    | 0xff3c
    | 0xff3d
    | 0xff3f
    | 0xff5b
    | 0xff5d
    | 0xff5f
    | 0xff60
    | 0xff61
    | 0xff62
    | 0xff63
    | 0xff64
    | 0xff65
    | 0x10100
    | 0x10101
    | 0x10102
    | 0x1039f
    | 0x103d0
    | 0x1056f
    | 0x10857
    | 0x1091f
    | 0x1093f
    | 0x10a50
    | 0x10a51
    | 0x10a52
    | 0x10a53
    | 0x10a54
    | 0x10a55
    | 0x10a56
    | 0x10a57
    | 0x10a58
    | 0x10a7f
    | 0x10af0
    | 0x10af1
    | 0x10af2
    | 0x10af3
    | 0x10af4
    | 0x10af5
    | 0x10af6
    | 0x10b39
    | 0x10b3a
    | 0x10b3b
    | 0x10b3c
    | 0x10b3d
    | 0x10b3e
    | 0x10b3f
    | 0x10b99
    | 0x10b9a
    | 0x10b9b
    | 0x10b9c
    | 0x10f55
    | 0x10f56
    | 0x10f57
    | 0x10f58
    | 0x10f59
    | 0x11047
    | 0x11048
    | 0x11049
    | 0x1104a
    | 0x1104b
    | 0x1104c
    | 0x1104d
    | 0x110bb
    | 0x110bc
    | 0x110be
    | 0x110bf
    | 0x110c0
    | 0x110c1
    | 0x11140
    | 0x11141
    | 0x11142
    | 0x11143
    | 0x11174
    | 0x11175
    | 0x111c5
    | 0x111c6
    | 0x111c7
    | 0x111c8
    | 0x111cd
    | 0x111db
    | 0x111dd
    | 0x111de
    | 0x111df
    | 0x11238
    | 0x11239
    | 0x1123a
    | 0x1123b
    | 0x1123c
    | 0x1123d
    | 0x112a9
    | 0x1144b
    | 0x1144c
    | 0x1144d
    | 0x1144e
    | 0x1144f
    | 0x1145b
    | 0x1145d
    | 0x114c6
    | 0x115c1
    | 0x115c2
    | 0x115c3
    | 0x115c4
    | 0x115c5
    | 0x115c6
    | 0x115c7
    | 0x115c8
    | 0x115c9
    | 0x115ca
    | 0x115cb
    | 0x115cc
    | 0x115cd
    | 0x115ce
    | 0x115cf
    | 0x115d0
    | 0x115d1
    | 0x115d2
    | 0x115d3
    | 0x115d4
    | 0x115d5
    | 0x115d6
    | 0x115d7
    | 0x11641
    | 0x11642
    | 0x11643
    | 0x11660
    | 0x11661
    | 0x11662
    | 0x11663
    | 0x11664
    | 0x11665
    | 0x11666
    | 0x11667
    | 0x11668
    | 0x11669
    | 0x1166a
    | 0x1166b
    | 0x1166c
    | 0x1173c
    | 0x1173d
    | 0x1173e
    | 0x1183b
    | 0x11a3f
    | 0x11a40
    | 0x11a41
    | 0x11a42
    | 0x11a43
    | 0x11a44
    | 0x11a45
    | 0x11a46
    | 0x11a9a
    | 0x11a9b
    | 0x11a9c
    | 0x11a9e
    | 0x11a9f
    | 0x11aa0
    | 0x11aa1
    | 0x11aa2
    | 0x11c41
    | 0x11c42
    | 0x11c43
    | 0x11c44
    | 0x11c45
    | 0x11c70
    | 0x11c71
    | 0x11ef7
    | 0x11ef8
    | 0x12470
    | 0x12471
    | 0x12472
    | 0x12473
    | 0x12474
    | 0x16a6e
    | 0x16a6f
    | 0x16af5
    | 0x16b37
    | 0x16b38
    | 0x16b39
    | 0x16b3a
    | 0x16b3b
    | 0x16b44
    | 0x16e97
    | 0x16e98
    | 0x16e99
    | 0x16e9a
    | 0x1bc9f
    | 0x1da87
    | 0x1da88
    | 0x1da89
    | 0x1da8a
    | 0x1da8b
    | 0x1e95e
    | 0x1e95f -> true
    | _ -> false)

let tokenize t ?(include_special_characters = false) str =
  let tokens =
    split str ~split_on:is_whitespace
    |> List.concat_map ~f:(fun (kind, interval) ->
           let tokens =
             match kind with
             | `content ->
               let str = Interval.sub interval str in
               split str ~split_on:is_punctuation
               |> List.concat_map ~f:(fun (kind, interval) ->
                      let str = Interval.sub interval str in
                      let str = if t.lower_case then String.lowercase str else str in
                      let kind =
                        match kind with
                        | `content -> Token.Kind.Normal
                        | `separator -> Punctuation
                      in
                      Bert_vocab.wordpiece t.vocab str ~kind
                      |> Token.add_offset ~offset:interval.start)
             | `separator -> []
           in
           Token.add_offset tokens ~offset:interval.start)
  in
  if include_special_characters
  then
    Option.to_list (Bert_vocab.cls_token t.vocab ~pos:0)
    @ tokens
    @ Option.to_list (Bert_vocab.sep_token t.vocab ~pos:(String.length str))
  else tokens

let%expect_test "tokenize" =
  let module P = Caml.Printf in
  let t = create (Bert_vocab.Test.create ()) ~lower_case:true in
  List.iter
    ~f:(fun str ->
      let tokens = tokenize t str in
      P.printf "\"%s\"\n%s\n%!" str ([%sexp_of: Token.t list] tokens |> Sexp.to_string_hum))
    [ ""; "  hello    world"; "hello world!"; "hello world!!"; "!hello unable unaffable" ];
  [%expect
    {|
    ""
    ()
    "  hello    world"
    (((text hello) (start 2) (stop 7)
      (with_id (((token_id 0) (is_continuation false)))) (kind Normal))
     ((text world) (start 11) (stop 16)
      (with_id (((token_id 1) (is_continuation false)))) (kind Normal)))
    "hello world!"
    (((text hello) (start 0) (stop 5)
      (with_id (((token_id 0) (is_continuation false)))) (kind Normal))
     ((text world) (start 6) (stop 11)
      (with_id (((token_id 1) (is_continuation false)))) (kind Normal))
     ((text !) (start 11) (stop 12)
      (with_id (((token_id 7) (is_continuation false)))) (kind Punctuation)))
    "hello world!!"
    (((text hello) (start 0) (stop 5)
      (with_id (((token_id 0) (is_continuation false)))) (kind Normal))
     ((text world) (start 6) (stop 11)
      (with_id (((token_id 1) (is_continuation false)))) (kind Normal))
     ((text !) (start 11) (stop 12)
      (with_id (((token_id 7) (is_continuation false)))) (kind Punctuation))
     ((text !) (start 12) (stop 13)
      (with_id (((token_id 8) (is_continuation true)))) (kind Punctuation)))
    "!hello unable unaffable"
    (((text !) (start 0) (stop 1)
      (with_id (((token_id 7) (is_continuation false)))) (kind Punctuation))
     ((text hello) (start 1) (stop 6)
      (with_id (((token_id 0) (is_continuation false)))) (kind Normal))
     ((text una) (start 7) (stop 10)
      (with_id (((token_id 2) (is_continuation false)))) (kind Normal))
     ((text ble) (start 10) (stop 13)
      (with_id (((token_id 4) (is_continuation true)))) (kind Normal))
     ((text una) (start 14) (stop 17)
      (with_id (((token_id 2) (is_continuation false)))) (kind Normal))
     ((text ffa) (start 17) (stop 20)
      (with_id (((token_id 3) (is_continuation true)))) (kind Normal))
     ((text ble) (start 20) (stop 23)
      (with_id (((token_id 4) (is_continuation true)))) (kind Normal))) |}]
